name: VyOS v1.3.x LTS Release

#on:
#  push:
#    tags:
#      - 'v1.3.*'
on:
  workflow_dispatch:
    inputs:
      branch:
        type: choice
        description: Select the VyOS branch to build from
        options: 
        - equuleus
        - current
        - crux
      commit:
        description: SHA1 Commit

env:
  GIT_CLONE_URL: https://github.com/vyos/vyos-build
  DEBIAN_MIRROR: http://ftp.us.debian.org/debian/
  #BRANCH: equuleus
  BUILD_ARCH: amd64
  BUILD_BY: Veduco
  BUILD_TYPE: release
  #BUILD_VERSION: 1.3.0
  BUILD_QEMU: false
  BUILD_QCOW2: false
  BUILD_HYPERV: false
  BUILD_VMWARE: false
  PACKER_JSON_PATCH: false
  PACKER_JSON_PATCH_FILE: packer.json_wait-time_equuleus.patch
  VMWARE_OVFTOOL: VMware-ovftool-4.4.3-18663434-lin.x86_64.bundle
  VMWARE_PRIVATE_KEY: private_key_for_signing_vmware_image.pem
  ARTIFACTS_DIR: artifacts
  WORKING_DIR: vyos-build
  STATUS_SUCCESS: "::set-output name=status::success"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: vyos/vyos-build:equuleus
      options: --workdir /vyos --privileged

    steps:

      - name: Get Version Number
        id: get-version
        run: |
          if [ ${{ github.event.inputs.branch }} == "crux" ]; then echo ::set-output name=CODE_VERSION::1.2; fi
          if [ ${{ github.event.inputs.branch }} == "equuleus" ]; then echo ::set-output name=CODE_VERSION::1.3; fi
          if [ ${{ github.event.inputs.branch }} == "current" ]; then echo ::set-output name=CODE_VERSION::1.4; fi
#steps.get-version.outputs.CODE_VERSION
 
      - name: Set Release Version
        id: get-relver
        run: echo ::set-output name=RELEASE_VERSION::${{ steps.get-version.outputs.CODE_VERSION }}-${{ github.event.inputs.branch }}
#steps.get-relver.outputs.RELEASE_VERSION

      - name: Checkout
        uses: actions/checkout@v2

      - name: Clone Source Code
        run: git clone -b ${{ github.event.inputs.branch }} --single-branch $GIT_CLONE_URL $WORKING_DIR
          
      - name: Checkout Specific Commit
        working-directory: ./${{ env.WORKING_DIR }}
        run: git checkout ${{ github.event.inputs.commit }}

      - name: Set Build Names
        id: set-build-names
        working-directory: ./${{ env.WORKING_DIR }}
        run: |
          export SHA1=$(git rev-parse --short HEAD)
          export VERSION_STRING="${{ steps.get-relver.outputs.RELEASE_VERSION }}-${SHA1}"
          echo ::set-output name=VERSION_STRING::${{ steps.get-relver.outputs.RELEASE_VERSION }}-${SHA1}
          echo ::set-output name=COMMIT_ID::${SHA1}

#echo "COMMIT_ID=${SHA1}" >> $GITHUB_ENV
#echo "VERSION_STRING=${{ steps.get-relver.outputs.RELEASE_VERSION }}-${SHA1}">> $GITHUB_ENV

#steps.set-build-names.outputs.COMMIT_ID
#steps.set-build-names.outputs.VERSION_STRING

      - name: Set Environment Names
        working-directory: ./${{ env.WORKING_DIR }}
        run: |
          echo "VERSION_STRING=${{ steps.set-build-names.outputs.VERSION_STRING }}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ steps.get-relver.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
          echo "COMMIT_ID=${{ steps.set-build-names.outputs.COMMIT_ID }}" >> $GITHUB_ENV
          echo "CODE_VERSION=${{ steps.get-version.outputs.CODE_VERSION }}" >> $GITHUB_ENV

      - name: Configure Build
        run: ./configure --architecture $BUILD_ARCH --build-by $BUILD_BY --build-type $BUILD_TYPE --version ${{ env.VERSION_STRING }}

      - name: Create Artifacts Dir
        run: mkdir -p ./$ARTIFACTS_DIR

### Example
### BRANCH: equuleus
### VERSION_STRING: 1.3-equuleus-b381eb2
### RELEASE_VERSION: 1.3-equuleus

      - name: Build ISO Image
        id: iso
        working-directory: ./${{ env.WORKING_DIR }}
        run: |
          make iso && echo $STATUS_SUCCESS
          cp -f ./build/vyos-${{ env.VERSION_STRING }}-$BUILD_ARCH.iso ./$ARTIFACTS_DIR/
          echo Check localdir
          ls -al ./
          echo Check buildDir
          ls -al ./build
          echo Check artifacts dir
          ls -al ./$ARTIFACTS_DIR/
         #cp -f ./build/vyos-*-$BUILD_ARCH.iso ./$ARTIFACTS_DIR/

      - name: Build QEMU Image
        id: qemu
        working-directory: ./${{ env.WORKING_DIR }}
        if: steps.iso.outputs.status == 'success' && env.BUILD_QEMU == 'true'
        run: |
          export BUILD_VERSION=${{ env.VERSION_STRING }}
          [ $PACKER_JSON_PATCH = true ] && git apply $GITHUB_WORKSPACE/patches/$PACKER_JSON_PATCH_FILE
          [ -e ./build/live-image-$BUILD_ARCH.hybrid.iso ] && make qemu && echo $STATUS_SUCCESS
          cp -f ./packer_build/qemu/vyos_qemu_image.img ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-qemu.img
          cp -f ./build/vyos-$BUILD_VERSION-$BUILD_ARCH.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-qemu.qcow2

      - name: Build Hyper-V Image
        working-directory: ./${{ env.WORKING_DIR }}
        if: steps.qemu.outputs.status == 'success' && env.BUILD_HYPERV == 'true'
        run: |
          export BUILD_VERSION=${{ env.VERSION_STRING }}
          [ -e ./packer_build/qemu/vyos_qemu_image.img ] && make hyperv
          cp -f ./packer_build/hyperv/vyos_hyperv_image.vhd ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-hyperv.vhd

      - name: Build VMware Image
        working-directory: ./${{ env.WORKING_DIR }}
        if: steps.qemu.outputs.status == 'success' && env.BUILD_VMWARE == 'true'
        run: |
          export BUILD_VERSION=${{ env.VERSION_STRING }}
          export PRIVATE_KEY_PATH="$GITHUB_WORKSPACE/tools/$VMWARE_PRIVATE_KEY"
          $GITHUB_WORKSPACE/tools/$VMWARE_OVFTOOL --eulas-agreed
          [ -e ./packer_build/qemu/vyos_qemu_image.img ] && make vmware
          cp -f ./build/vyos_vmware_image-signed.cert ./$ARTIFACTS_DIR/
          cp -f ./build/vyos_vmware_image-signed-disk1.vmdk ./$ARTIFACTS_DIR/
          cp -f ./build/vyos_vmware_image-signed.mf ./$ARTIFACTS_DIR/
          cp -f ./build/vyos_vmware_image-signed.ovf ./$ARTIFACTS_DIR/
          cp -f ./build/vyos_vmware_image-signed.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-vmware-signed.ova
          cp -f ./build/vyos_vmware_image.vmdk ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-vmware.vmdk

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: vyos-${{ env.VERSION_STRING }}-${{ env.BUILD_ARCH }}-images
          path: ${{ env.WORKING_DIR }}/${{ env.ARTIFACTS_DIR }}
    outputs:
      VERSION_STRING: ${{ steps.set-build-names.outputs.VERSION_STRING }}
      RELEASE_VERSION: ${{ steps.get-relver.outputs.RELEASE_VERSION }}
      COMMIT_ID: ${{ steps.set-build-names.outputs.COMMIT_ID }}
      CODE_VERSION: ${{ steps.get-version.outputs.CODE_VERSION }}






  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: vyos-${{ needs.build.outputs.VERSION_STRING }}-${{ env.BUILD_ARCH }}-images

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: VyOS v${{ env.CODE_VERSION }} [${{ env.COMMIT_ID }}]
          #body: VyOS v${{ env.CODE_VERSION }} [${{ env.COMMIT_ID }}]
          tag: ${{ env.RELEASE_VERSION }}-${{ env.COMMIT_ID }}
          draft: false
          prerelease: false
          files: |
            vyos-${{ needs.build.outputs.VERSION_STRING }}-${{ env.BUILD_ARCH }}.iso
            vyos-${{ needs.build.outputs.VERSION_STRING }}-${{ env.BUILD_ARCH }}-qemu.img
            vyos-${{ needs.build.outputs.VERSION_STRING }}-${{ env.BUILD_ARCH }}-qemu.qcow2
            vyos-${{ needs.build.outputs.VERSION_STRING }}-${{ env.BUILD_ARCH }}-hyperv.vhd
            vyos-${{ needs.build.outputs.VERSION_STRING }}-${{ env.BUILD_ARCH }}-vmware-signed.ova
            vyos-${{ needs.build.outputs.VERSION_STRING }}-${{ env.BUILD_ARCH }}-vmware.vmdk
